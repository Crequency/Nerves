@page "/account"
@implements IDisposable
@inject IJSRuntime JS

<PageTitle>Account</PageTitle>

<h1>Account</h1>

<hr>

<br>

<div class="container" id="container">
    <div class="form-container sign-up-container">
        <div class="part">
            <h1>Your Account</h1>
            <br>
            <input id="account_input_src_password" type="password" placeholder="Original password"
                @bind="original_passwd" />
            <br>
            <input id="account_input_new_password" type="password" placeholder="New password" @bind="new_passwd" />
            <br>
            <input id="account_input_new_password_confirm" type="password" placeholder="Confirm new password"
                @bind="new_passwd_confirm" />
            <br>
            <button @onclick="Update">Update</button>
            <br>
        </div>
    </div>
    <div class="form-container sign-in-container">
        <div class="part">
            <h1>Sign in</h1>
            <br><br>
            <input id="sign_in_input_name" type="text" placeholder="Name" @bind="login_name" />
            <br>
            <input id="sign_in_input_password" type="password" placeholder="Password" @bind="login_password" />
            <br><br>
            <button @onclick="SignIn">Sign In</button>
            <br>
        </div>
    </div>
    <div class="overlay-container">
        <div class="overlay">
            <div class="overlay-panel overlay-left">
                <h1>Welcome Back!</h1>
                <p>To keep connected with us please login with your personal info</p>
                @* <button class="ghost" id="signIn">Sign In</button> *@
            </div>
            <div class="overlay-panel overlay-right">
                <h1>Welcome to Nerves Dashboard</h1>
                <p>Sign in and access your nerves server.</p>
                <button class="ghost">Contact Administrator</button>
            </div>
        </div>
    </div>
</div>

<script>
    window.active_right_panel = () => {
        var container = document.getElementById('container');
        container.classList.add("right-panel-active");
    }

    window.disactive_right_panel = () => {
        var container = document.getElementById('container');
        container.classList.remove("right-panel-active");
    }

    window.clear_sign_in_fields = () => {
        document.getElementById('sign_in_input_name').value = "";
        document.getElementById('sign_in_input_password').value = "";
    }

    window.clear_account_fields = () => {
        document.getElementById('account_input_src_password').value = "";
        document.getElementById('account_input_new_password').value = "";
        document.getElementById('account_input_new_password_confirm').value = "";
    }

    window.alert_proxy = (content) => {
        alert(content);
    }
</script>

@code {
    protected override void OnInitialized()
    {
        CheckLoginState();
        Instances.authenticationManager!.OnChange += CheckLoginState;
    }

    private async void CheckLoginState()
    {
        await Task.Run(async () =>
        {
            if (Instances.authenticationManager!.HasLogin)
                await JS.InvokeAsync<string>("active_right_panel");
            else
                await JS.InvokeAsync<string>("disactive_right_panel");
        });
    }

    private async void OnChangeHandler()
    {
        CheckLoginState();
        await InvokeAsync(StateHasChanged);
    }

    private string? login_name;

    private string? login_password;

    private async void SignIn()
    {
        if (login_name is null || login_password is null)
        {
            Console.WriteLine($"* Warn: Please provide name and password.");
            return;
        }

        if (await Instances.authenticationManager!.SignIn(login_name, login_password))
        {
            ClearFields();
        }
        else
        {
            await JS.InvokeAsync<string>("alert_proxy", "Login failed!");
        }
    }

    private async void ClearFields()
    {
        await JS.InvokeAsync<string>("clear_sign_in_fields");
        await JS.InvokeAsync<string>("clear_account_fields");
    }

    private string? original_passwd;

    private string? new_passwd;

    private string? new_passwd_confirm;

    private async void Update()
    {
        if (original_passwd is null || new_passwd is null || new_passwd_confirm is null)
        {
            Console.WriteLine($"* WARN: Please input value");
            return;
        }

        if (!new_passwd.Equals(new_passwd_confirm))
        {
            Console.WriteLine("* WARN: Please input same new passwd");
            await JS.InvokeAsync<string>("alert_proxy", "Please input same new passwd");
            return;
        }

        var token = await Instances.authenticationManager!.GetToken(Instances.authenticationManager!.LoginUser!.Id!,
        original_passwd);

        if (token is null)
        {
            Console.WriteLine("* WARN: Please input correct original passwd");
            await JS.InvokeAsync<string>("alert_proxy", "Please input correct original passwd");
            return;
        }

        var user = Instances.authenticationManager!.LoginUser!;

        if (await Instances.authenticationManager!.UpdatePassword(user.Id!, token.Token!, new_passwd))
        {
            Console.WriteLine("# Info: Password updated");
            ClearFields();
            Instances.authenticationManager!.Logout();
        }
        else
        {
            await JS.InvokeAsync<string>("alert_proxy", "Password update failed");
        }
    }

    public void Dispose()
    {
        Instances.authenticationManager!.OnChange -= OnChangeHandler;
    }
}
